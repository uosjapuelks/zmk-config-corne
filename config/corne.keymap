/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// REFERENCE
// 37 50 64 78
// ------------------------------------------------------------   -------------------------------------------------------------------
// | 0 			 | 1  		| 2  			| 3  			| 4  			| 5  			|   | 6  		| 7   	| 8  		  | 9  			| 10  		|  11 		| 
//	 &kp TAB   	 &kp Q 		 &kp W 		 &kp E 		 &kp R 		 &kp T     &kp Y 		&kp U  &kp I      &kp O   	&kp P    	  &kp BSPC
// ------------------------------------------------------------   -------------------------------------------------------------------
// |  12 		 | 13  		| 14  		| 15  		| 16  		| 17  		|   | 18  	| 19   	| 20  	  | 21  		| 22  			|   23   	| 
// 	 &kp LCTRL 	 &kp A 		 &kp S 		 &kp D 		 &kp F 		 &kp G     &kp H 		&kp J  &kp K      &kp L   	&kp SEMI 	  &kp SQT
// ------------------------------------------------------------   -------------------------------------------------------------------
// |  24 		 | 25  		| 26  		| 27  		| 28  		| 29  		|   | 30  	| 31   	| 32     	| 33  		| 34  			|  35  		| 
// 	 &kp LSHFT 	 &kp Z 		 &kp X 		 &kp C 		 &kp V 		 &kp B     &kp N 		&kp M  &kp COMMA  &kp DOT 	&kp FSLH 	  &kp ESC
// ------------------------------------------------------------    ------------------------------------------------------------------
//                  			 |  36 			|  37 			|  38 			|   |  39 	| 40  	| 41 		| 
//               		        &kp LGUI    &mo 1 	   &kp SPACE       &kp RET  &mo 2   &td_mt
// ------------------------------------------------------------    ----------------------------

/ {
    chosen {
        zmk,backlight = <0>;
    };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
 		&kp TAB   	 &kp Q  &kp W  &kp E  &kp R  &kp T     &kp Y  &kp U  &kp I     	&kp O   	&kp P    	 &kp BSPC
 		&kp LCTRL 	 &kp A  &kp S  &kp D  &kp F  &kp G     &kp H  &kp J  &kp K     	&kp L   	&kp SEMI 	 &kp SQT
 		&cap_dance   &kp Z  &kp X  &kp C  &kp V  &kp B     &kp N  &kp M  &kp COMMA 	&kp DOT 	&kp FSLH 	 &kp RSHIFT
                  		  &kp LGUI  &mo 1  &kp SPACE     &kp RET  &mo 2  &td_mt
                        >;
                };
                lower_layer {
                        bindings = <
   	&trans    &kp N1    &kp N2   &kp N3   &kp N4   &kp N5        &kp N6   	 &kp N7   	 &kp N8 		&kp N9    	&kp N0 		 &trans
    &trans    &trans    &trans   &trans   &SCAT   &trans        &kp MINUS 	 &kp EQUAL 	 &kp LBKT  	&kp RBKT 		&kp BSLH 	 &kp PLUS
   	&trans    &trans    &trans   &trans   &trans   &trans        &kp UNDER 	 &kp TILDE   &kp LBRC  	&kp RBRC 		&kp PIPE 	 &kp TILDE        
                                 &trans   &trans 	 &trans        &trans    &trans  &trans
                        >;
                };

                raise_layer {
                        bindings = <
   	&trans    &kp EXCL   &kp AT    &kp HASH   &kp DLLR   &kp PRCNT       &kp CARET   &kp AMPS  	 &kp ASTRK 	 &kp LPAR 		&kp RPAR 		&trans
   	&trans    &trans     &trans    &trans     &trans     &trans          &kp LEFT    &kp DOWN 	 &kp UP 		 &kp RIGHT    &trans      &trans
   	&trans    &trans     &trans    &trans     &trans     &trans          &kp C_PREV  &kp C_PP    &kp C_NEXT  &trans       &trans      &trans
                             	  &kp RALT      &trans   		 &trans          &trans  &trans   &trans
                        >;
                };

                adjust_layer {
                        bindings = <
   	&kp F1 			 &kp F2  		     &kp F3  		     &kp F4     	   &kp F5  	       &kp F6  	        &kp F7  		 &kp F8  		 &kp F9  		 &kp F10  	 &kp F11  	&kp F12  
    &bt BT_CLR   &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4     &kp C_BRIGHTNESS_INC 	   &kp C_BRIGHTNESS_DEC 	 &trans 		 &trans    &trans      &sys_reset
   	&trans       &trans          &trans          &trans          &trans          &trans           &trans     &trans      &trans      &trans       &trans      &trans
                                    		           &trans        &trans       	 &trans           &trans  &trans  &trans
                        >;
                };
        };

        macros {
            writequit: writequit {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_tap &kp COLON &kp W &kp Q &kp RET>;
            };
            write: write {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_tap &kp COLON &kp W &kp RET>;
            };
            quit: quit {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_tap &kp COLON &kp Q &kp RET>;
            };
            SCAT: SCAT {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings = <&kp LG(LS(SPACE))>;
            };
        };

        conditional_layers {
               compatible = "zmk,conditional-layers";
               tri_layer {
                   if-layers = <1 2>;
                   then-layer = <3>;
               };
        };

        behaviors {
               weak: weak {
                     compatible = "zmk,behavior-hold-tap";
                     bindings = <&kp>, <&kp>;
 
                     #binding-cells = <2>;
                     tapping-term-ms = <230>;
                     flavor = "tap-preferred";
                     require-prior-idle-ms = <125>;
                     quick-tap-ms = <230>;
               };
               
               cap_dance: tap_dance_0 {
                 compatible = "zmk,behavior-tap-dance";
                 #binding-cells = <0>;
                 tapping-term-ms = <200>;
                 bindings = <&kp LSHFT>, <&kp CAPSLOCK>;
               };

               td_mt: tap_dance_mod_tap {
                 compatible = "zmk,behavior-tap-dance";
                 #binding-cells = <0>;
                 tapping-term-ms = <200>;
                 bindings = <&mt RSHIFT CAPSLOCK>, <&kp RCTRL>;
               };
        };
        
        combos {
            compatible = "zmk,combos";

            wrtie_quit {
                bindings = <&write>;
                key-positions = < 2 22>;
            };
            write {
                bindings = <&writequit>;
                key-positions = < 0 1 2>;
            };
            quit {
                bindings = <&quit>;
                key-positions = < 1 22>;
            };

            display_move {
                bindings = <&kp LG(LC(LA(LEFT)))>;
                key-positions = < 24 25 26 >;
            };
        
            cycle_app {
                bindings = <&mt LC(LALT) LG(GRAVE)>;
                key-positions = < 36 12>;
            };
        
            escape {
                bindings = <&gresc>;
                key-positions = <19 20>;
            };
        
            delete {
                bindings = <&kp DEL>;
                key-positions = <15 16>;
            };
        
            copy {
                bindings = <&kp LG(C)>;
                key-positions = <26 27>;
            };
        
            paste {
                bindings = <&kp LG(V)>;
                key-positions = <27 28>;
            };
        
            cut {
                bindings = <&kp LG(X)>;
                key-positions = <26 28>;
            };
        
            vol-up {
                bindings = <&kp C_VOL_UP>;
                key-positions = <10 11>;
            };
        
            vol-down {
                bindings = <&kp C_VOL_DN>;
                key-positions = <22 23>;
            };
        
            vol-mute {
                bindings = <&kp C_MUTE>;
                key-positions = <34 35>;
            };
        
            scroll-up {
                bindings = <&kp C_AC_SCROLL_UP>;
                key-positions = <7 10>;
            };
        
            scroll-down {
                bindings = <&kp C_AC_SCROLL_DOWN>;
                key-positions = <31 34>;
            };
        };

};
